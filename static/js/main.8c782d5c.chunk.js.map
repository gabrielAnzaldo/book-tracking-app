{"version":3,"sources":["services/api/BooksAPI.js","components/BookAuthor.jsx","components/BookShelfChanger.jsx","components/Book.jsx","components/BooksList.jsx","components/Shelf.jsx","components/SearchPage.jsx","components/BooksApp.jsx","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","maxResults","data","books","BookAuthor","_ref","author","react_default","a","createElement","className","BookShelfChanger","onChangeHandler","event","_this","props","onChangeShelf","target","value","this","bookReference","onChange","disabled","Component","Book","imageLinks","style","width","height","backgroundImage","smallThumbnail","components_BookShelfChanger","title","authors","map","components_BookAuthor","key","uuidv4","defaultProps","BooksList","shelfName","shelfBooks","singleBook","components_Book","assign","currentBookShelf","Shelf","keyShelf","shelfData","shelfTitle","components_BooksList","SearchPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeSearchQuery","trim","allExistingBooks","existingBooks","currentlyReading","wantToRead","read","BooksAPI","response","length","setState","resultingBooks","item","bookIndex","findIndex","bookItem","targetShelfName","bookFounded","findBookInShelf","tempShelfBooks","selectedBooks","push","tempOldBookShelf","oldIndexBook","splice","onChangeRoute","onAddBooksShelfs","allSelectedBooks","state","inputSearch","focus","_this2","cursor","onClick","type","placeholder","onKeyUp","ref","input","BooksApp","originShelfName","_this$setState","originShelf","filter","targetShelf","defineProperty","console","log","updateShelfState","updateSelectedBooks","keys","forEach","property","newBook","allBooks","tempCurrentlyReading","tempWantToRead","tempRead","_this3","es","path","render","history","components_SearchPage","newBooks","exact","components_Shelf","to","href","React","ReactDOM","components_BooksApp","document","getElementById"],"mappings":"uSACMA,EAAM,wCAINC,EAAUC,aAAVD,MACDA,IACHA,EAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAG7C,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cAAeR,GAaJS,EAAS,SAACC,EAAMC,GAAP,OACpBC,MAAK,GAAAC,OAAId,EAAJ,WAAAc,OAAiBH,EAAKI,IAAM,CAC/BC,OAAQ,MACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEV,YACtBW,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERC,EAAS,SAACC,EAAOC,GAAR,OACpBf,MAAK,GAAAC,OAAId,EAAJ,WAAkB,CACrBgB,OAAQ,OACRT,QAAQU,OAAAC,EAAA,EAAAD,CAAA,GACHV,EADE,CAELY,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEK,QAAOC,iBAC7BL,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAM,GAAI,OAAIA,EAAKC,SC/BRC,EAVI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZJ,IC4BUK,6MA7BbC,gBAAkB,SAACC,GACjBC,EAAKC,MAAMC,cAAcH,EAAMI,OAAOC,MAAOJ,EAAKC,gFAIlD,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UACES,MAAOC,KAAKJ,MAAMK,cAAcnC,MAChCoC,SAAUF,KAAKP,iBAEfL,EAAAC,EAAAC,cAAA,UAAQS,MAAM,OAAOI,UAAQ,GAA7B,cACAf,EAAAC,EAAAC,cAAA,UAAQS,MAAM,oBAAd,qBACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,cAAd,gBACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,QAAd,QACAX,EAAAC,EAAAC,cAAA,UAAQS,MAAM,QAAd,iBAhBqBK,aCIzBC,EAAO,SAAAT,GAAK,OAChBR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZK,GAASA,EAAMU,YAAclB,EAAAC,EAAAC,cAAA,OAC5BC,UAAU,aACVgB,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,gBAAe,OAAA1C,OAAS4B,EAAMU,WAAWK,eAA1B,QAEnDvB,EAAAC,EAAAC,cAACsB,EAAD,CACEf,cAAeD,EAAMC,cACrBI,cAAeL,KAGnBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcK,EAAMiB,OAClCjB,EAAMkB,SAAWlB,EAAMkB,QAAQC,IAAI,SAAA5B,GAAM,OACxCC,EAAAC,EAAAC,cAAC0B,EAAD,CAAYC,IAAKC,MAAU/B,OAAQA,SAM3CkB,EAAKc,aAAe,CAClBL,QAAS,IAYIT,QCjBAe,EAnBG,SAAAlC,GAAA,IAAGmC,EAAHnC,EAAGmC,UAAWC,EAAdpC,EAAcoC,WAAYzB,EAA1BX,EAA0BW,cAA1B,OAChBT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACX+B,EAAWP,IAAI,SAAAQ,GAAU,OACxBnC,EAAAC,EAAAC,cAACkC,EAADrD,OAAAsD,OAAA,CACER,IAAKM,EAAWtD,IACZsD,EAFN,CAGE1B,cAAeA,EACf6B,iBAAkBL,SCeXM,EAtBD,SAAAzC,GAAA,IAAG0C,EAAH1C,EAAG0C,SAAUC,EAAb3C,EAAa2C,UAAWhC,EAAxBX,EAAwBW,cAAxB,OACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBsC,EAAUC,YAC3C1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACyC,EAAD,CACEV,UAAWO,EACXN,WAAYO,EAAUP,WACtBzB,cAAeA,OCsIRmC,cA3Ib,SAAAA,EAAYpC,GAAO,IAAAD,EAAA,OAAAxB,OAAA8D,EAAA,EAAA9D,CAAA6B,KAAAgC,IACjBrC,EAAAxB,OAAA+D,EAAA,EAAA/D,CAAA6B,KAAA7B,OAAAgE,EAAA,EAAAhE,CAAA6D,GAAAI,KAAApC,KAAMJ,KAURyC,oBAAsB,SAAC3C,GACrB,IAAMb,EAAQa,EAAMI,OAAOC,MAAMuC,OAC3BC,EAAmB5C,EAAKC,MAAM4C,cAAcC,iBAAiBnB,WAChEtD,OAAO2B,EAAKC,MAAM4C,cAAcE,WAAWpB,YAC3CtD,OAAO2B,EAAKC,MAAM4C,cAAcG,KAAKrB,YAEpCzC,EACF+D,EAAgB/D,EAAO,IACpBJ,KAAK,SAACoE,GACDA,GAAYA,EAASC,OAAS,EAChCnD,EAAKoD,SAAS,CACZC,eAAgBH,EAAS9B,IAAI,SAACkC,GAC5B,IAAMC,EAAYX,EAAiBY,UAAU,SAAAC,GAAQ,OAAIA,EAASnF,KAAOgF,EAAKhF,KAC9E,OAAIiF,GAAa,EACR/E,OAAOsD,OAAO,GAAIwB,EAAM,CAAEnF,MAAOyE,EAAiBW,GAAWpF,QAE/DmF,MAIXtD,EAAKoD,SAAS,CAAEC,eAAgB,OAItCrD,EAAKoD,SAAS,CAAEC,eAAgB,MAnCjBrD,EAuCnBE,cAAgB,SAACwD,EAAiBxF,GAChC,IAAMyF,EAAc3D,EAAK4D,gBAAgB1F,GACzC,GAAwB,SAApBwF,EAA4B,CAC9B,IAAMG,EAAiB7D,EAAK8D,cAAcJ,GAC1C,GAAIC,EAAYrF,IAAM,GACpB,GAAIqF,EAAYxF,QAAUuF,EAAiB,CACzCG,EAAeE,KAAKvF,OAAOsD,OAAO,GAAI5D,EAAKoC,cAAe,CAAEnC,MAAOuF,KACnE,IAAMM,EAAmBhE,EAAK8D,cAAcH,EAAYxF,OAClD8F,EAAeD,EAClBR,UAAU,SAAAF,GAAI,OAAIA,EAAKhF,KAAOJ,EAAKoC,cAAchC,KACpD0F,EAAiBE,OAAOD,EAAc,GACtCjE,EAAK8D,cAAcH,EAAYxF,OAAS6F,QAG1CH,EAAeE,KAAKvF,OAAOsD,OAAO,GAAI5D,EAAKoC,cAAe,CAAEnC,MAAOuF,KAErE1D,EAAK8D,cAAcJ,GAAmBG,OACjC,GAAIF,EAAYrF,IAAM,EAAG,CAC9B,IAAM0F,EAAmBhE,EAAK8D,cAAcH,EAAYxF,OAClD8F,EAAeD,EAAiBR,UAAU,SAAAF,GAAI,OAAIA,EAAKhF,KAAOJ,EAAKoC,cAAchC,KACvF0F,EAAiBE,OAAOD,EAAc,GACtCjE,EAAK8D,cAAcH,EAAYxF,OAAS6F,IA5DzBhE,EAgEnBmE,cAAgB,WACdnE,EAAKC,MAAMmE,iBAAiBpE,EAAK8D,gBAjEhB9D,EAoEnB4D,gBAAkB,SAAC1F,GACjB,IAAMyF,EAAc,CAClBrF,IAAK,EACLH,MAAO,IAEHkG,EAAmBrE,EAAK8D,cAAchB,iBACzCzE,OAAO2B,EAAK8D,cAAcf,YAC1B1E,OAAO2B,EAAK8D,cAAcd,MACvBO,EAAYc,EAAiBb,UAAU,SAAAF,GAAI,OAAIA,EAAKhF,KAAOJ,EAAKoC,cAAchC,KAMpF,OALAqF,EAAYrF,GAAKiF,EACbA,GAAa,IACfI,EAAYxF,MAAQkG,EAAiBd,GAAWpF,OAG3CwF,GAlFU3D,EAqFnB8D,cAAgB,CACdhB,iBAAkB,GAClBC,WAAY,GACZC,KAAM,IAtFNhD,EAAKsE,MAAQ,CACXjB,eAAgB,IAHDrD,mFAQjBK,KAAKkE,YAAYC,yCAmFV,IAAAC,EAAApE,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,eACVgB,MAAO,CAAE8D,OAAQ,WACjBC,QAAStE,KAAK8D,eAHhB,aAOA1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SACEiF,KAAK,OACLC,YAAY,4BACZzE,MAAOC,KAAKiE,MAAMlE,MAClB0E,QAAS,SAAA/E,GAAK,OAAI0E,EAAK/B,oBAAoB3C,IAC3CgF,IAAK,SAACC,GAAYP,EAAKF,YAAcS,OAI3CvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXS,KAAKiE,MAAMjB,eAAejC,IAAI,SAAAQ,GAAU,OACvCnC,EAAAC,EAAAC,cAACkC,EAADrD,OAAAsD,OAAA,CAAMR,IAAKM,EAAWtD,IAAQsD,EAA9B,CAA0C1B,cAAeuE,EAAKvE,6BApHnDO,aCuIVwE,oNAnIbX,MAAQ,CACNxB,iBAAkB,CAChBX,WAAY,oBACZR,WAAY,GACZrD,GAAI,GAENyE,WAAY,CACVZ,WAAY,eACZR,WAAY,GACZrD,GAAI,GAEN0E,KAAM,CACJb,WAAY,OACZR,WAAY,GACZrD,GAAI,MAiCR4B,cAAgB,SAACwD,EAAiBxF,GAChC,IAAMgH,EAAkBhH,EAAKoC,cAAcyB,iBAC3C,GAAImD,IAAoBxB,GAAuC,SAApBA,EAA4B,KAAAyB,EAC/DC,EAAc5G,OAAOsD,OAAO,GAAI9B,EAAKsE,MAAMY,IACjDE,EAAYzD,WAAayD,EAAYzD,WAClC0D,OAAO,SAAA5B,GAAQ,OAAIA,EAASnF,KAAOJ,EAAKoC,cAAchC,KACzD,IAAMgH,EAActF,EAAKsE,MAAMZ,GAC/B4B,EAAY3D,WACToC,KAAKvF,OAAOsD,OAAO,GAAI5D,EAAKoC,cAAe,CAAEnC,MAAOuF,KAEvD1D,EAAKoD,UAAL+B,EAAA,GAAA3G,OAAA+G,EAAA,EAAA/G,CAAA2G,EACGD,EAAkBE,GADrB5G,OAAA+G,EAAA,EAAA/G,CAAA2G,EAEGzB,EAAkB4B,GAFrBH,IAKAlC,EAAgB/E,EAAKoC,cAAeoD,GACjC5E,KAAK,kBAAM0G,QAAQC,IAAI,8BAI9BC,iBAAmB,SAACtG,EAAMsC,GACxB1B,EAAKoD,SAAL5E,OAAA+G,EAAA,EAAA/G,CAAA,GACGkD,EAAYlD,OAAOsD,OAAO,GAAI9B,EAAKsE,MAAM5C,GAAY,CAAEC,WAAYvC,SAIxEuG,oBAAsB,SAAC7B,GACrBtF,OAAOoH,KAAK9B,GAAe+B,QAAQ,SAACC,GAClChC,EAAcgC,GAAUD,QAAQ,SAACE,GAC/B9C,EAAgB8C,EAASD,GACtBhH,KAAK,kBAAM0G,QAAQC,IAAI,4BAE5BzF,EAAK0F,iBAAiB5B,EAAcgC,GACjCzH,OAAO2B,EAAKsE,MAAMwB,GAAUnE,YAAamE,yFA9D5B,IAAArB,EAAApE,KPPpBjC,MAAK,GAAAC,OAAId,EAAJ,UAAiB,CAAEO,YACrBgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAM,GAAI,OAAIA,EAAKC,QOOhBP,KAAK,SAACkH,GACL,GAAIA,GAAYA,EAAS7C,OAAQ,CAC/B,IAAM8C,EAAuB,GACvBC,EAAiB,GACjBC,EAAW,GACjBH,EAASH,QAAQ,SAACvC,GAChB,OAAQA,EAAKnF,OACX,IAAK,mBACH8H,EAAqBlC,KAAKT,GAC1B,MACF,IAAK,aACH4C,EAAenC,KAAKT,GACpB,MACF,IAAK,OACH6C,EAASpC,KAAKT,GACd,MACF,QACEkC,QAAQC,IAAI,WAGlBhB,EAAKiB,iBAAiBO,EAAsB,oBAC5CxB,EAAKiB,iBAAiBQ,EAAgB,cACtCzB,EAAKiB,iBAAiBS,EAAU,4CA0C/B,IAAAC,EAAA/F,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEC,KAAK,UACLC,OAAQ,SAAAhH,GAAA,IAAGiH,EAAHjH,EAAGiH,QAAH,OACN/G,EAAAC,EAAAC,cAAC8G,EAAD,CACErC,iBAAkB,SAACsC,GACjBN,EAAKT,oBAAoBe,GACzBF,EAAQzC,KAAK,MAEflB,cAAeuD,EAAK9B,WAK1B7E,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEM,OAAK,EACLL,KAAK,IACLC,OAAQ,kBACN9G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,WACGnB,OAAOoH,KAAKQ,EAAK9B,OAAOlD,IAAI,SAAAjD,GAAK,OAChCsB,EAAAC,EAAAC,cAACiH,EAAD,CACEtF,IAAKC,MACLU,SAAU9D,EACV+D,UAAWkE,EAAK9B,MAAMnG,GACtB+B,cAAekG,EAAKlG,oBAK5BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CAAMQ,GAAG,UAAUC,MAAI,GAAvB,2BA1HOC,IAAMtG,YCF7BuG,IAAST,OACP9G,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,KAAe5G,EAAAC,EAAAC,cAACsH,EAAD,OACfC,SAASC,eAAe","file":"static/js/main.8c782d5c.chunk.js","sourcesContent":["\nconst api = 'https://reactnd-books-api.udacity.com';\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet { token } = localStorage;\nif (!token) {\n  token = Math.random().toString(36).substr(-8);\n}\n\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token,\n};\n\nexport const get = bookId =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ shelf }),\n  }).then(res => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ query, maxResults }),\n  }).then(res => res.json())\n    .then(data => data.books);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookAuthor = ({ author }) => (\n  <div className=\"book-authors\">\n    {author}\n  </div>\n);\n\nBookAuthor.propTypes = {\n  author: PropTypes.string.isRequired,\n};\n\nexport default BookAuthor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass BookShelfChanger extends Component {\n  onChangeHandler = (event) => {\n    this.props.onChangeShelf(event.target.value, this.props);\n  }\n\n  render() {\n    return (\n      <div className=\"book-shelf-changer\">\n        <select\n          value={this.props.bookReference.shelf}\n          onChange={this.onChangeHandler}\n        >\n          <option value=\"none\" disabled>Move to...</option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    );\n  }\n}\n\nBookShelfChanger.propTypes = {\n  onChangeShelf: PropTypes.func.isRequired,\n  bookReference: PropTypes.shape({\n    shelf: PropTypes.string,\n  }).isRequired,\n};\n\nexport default BookShelfChanger;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport uuidv4 from 'uuid/v4';\n\nimport BookAuthor from './BookAuthor';\nimport BookShelfChanger from './BookShelfChanger';\n\nconst Book = props => (\n  <li>\n    <div className=\"book\">\n      <div className=\"book-top\">\n        {props && props.imageLinks && <div\n          className=\"book-cover\"\n          style={{ width: 128, height: 193, backgroundImage: `url(${props.imageLinks.smallThumbnail})` }}\n        />}\n        <BookShelfChanger\n          onChangeShelf={props.onChangeShelf}\n          bookReference={props}\n        />\n      </div>\n      <div className=\"book-title\">{props.title}</div>\n      {props.authors && props.authors.map(author => (\n        <BookAuthor key={uuidv4()} author={author} />\n      ))}\n    </div>\n  </li>\n);\n\nBook.defaultProps = {\n  authors: [],\n};\n\nBook.propTypes = {\n  onChangeShelf: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  authors: PropTypes.arrayOf(PropTypes.string),\n  imageLinks: PropTypes.shape({\n    smallThumbnail: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Book;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Book from './Book';\n\nconst BooksList = ({ shelfName, shelfBooks, onChangeShelf }) => (\n  <ol className=\"books-grid\">\n    {shelfBooks.map(singleBook => (\n      <Book\n        key={singleBook.id}\n        {...singleBook}\n        onChangeShelf={onChangeShelf}\n        currentBookShelf={shelfName}\n      />\n    ))}\n  </ol>\n);\n\nBooksList.propTypes = {\n  shelfName: PropTypes.string.isRequired,\n  shelfBooks: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onChangeShelf: PropTypes.func.isRequired,\n};\n\nexport default BooksList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BooksList from './BooksList';\n\nconst Shelf = ({ keyShelf, shelfData, onChangeShelf }) => (\n  <div className=\"bookshelf\">\n    <h2 className=\"bookshelf-title\">{shelfData.shelfTitle}</h2>\n    <div className=\"bookshelf-books\">\n      <BooksList\n        shelfName={keyShelf}\n        shelfBooks={shelfData.shelfBooks}\n        onChangeShelf={onChangeShelf}\n      />\n    </div>\n  </div>\n);\n\nShelf.propTypes = {\n  keyShelf: PropTypes.string.isRequired,\n  shelfData: PropTypes.shape({\n    shelfTitle: PropTypes.string,\n    shelfBooks: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  onChangeShelf: PropTypes.func.isRequired,\n};\n\nexport default Shelf;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Book from './Book';\nimport * as BooksAPI from '../services/api/BooksAPI';\n\nclass SearchPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resultingBooks: [],\n    };\n  }\n\n  componentDidMount() {\n    this.inputSearch.focus();\n  }\n\n  onChangeSearchQuery = (event) => {\n    const query = event.target.value.trim();\n    const allExistingBooks = this.props.existingBooks.currentlyReading.shelfBooks\n      .concat(this.props.existingBooks.wantToRead.shelfBooks)\n      .concat(this.props.existingBooks.read.shelfBooks);\n\n    if (query) {\n      BooksAPI.search(query, 20)\n        .then((response) => {\n          if (response && response.length > 0) {\n            this.setState({\n              resultingBooks: response.map((item) => {\n                const bookIndex = allExistingBooks.findIndex(bookItem => bookItem.id === item.id);\n                if (bookIndex >= 0) {\n                  return Object.assign({}, item, { shelf: allExistingBooks[bookIndex].shelf });\n                }\n                return item;\n              }),\n            });\n          } else {\n            this.setState({ resultingBooks: [] });\n          }\n        });\n    } else {\n      this.setState({ resultingBooks: [] });\n    }\n  }\n\n  onChangeShelf = (targetShelfName, book) => {\n    const bookFounded = this.findBookInShelf(book);\n    if (targetShelfName !== 'none') {\n      const tempShelfBooks = this.selectedBooks[targetShelfName];\n      if (bookFounded.id >= 0) {\n        if (bookFounded.shelf !== targetShelfName) {\n          tempShelfBooks.push(Object.assign({}, book.bookReference, { shelf: targetShelfName }));\n          const tempOldBookShelf = this.selectedBooks[bookFounded.shelf];\n          const oldIndexBook = tempOldBookShelf\n            .findIndex(item => item.id === book.bookReference.id);\n          tempOldBookShelf.splice(oldIndexBook, 1);\n          this.selectedBooks[bookFounded.shelf] = tempOldBookShelf;\n        }\n      } else {\n        tempShelfBooks.push(Object.assign({}, book.bookReference, { shelf: targetShelfName }));\n      }\n      this.selectedBooks[targetShelfName] = tempShelfBooks;\n    } else if (bookFounded.id >= 0) {\n      const tempOldBookShelf = this.selectedBooks[bookFounded.shelf];\n      const oldIndexBook = tempOldBookShelf.findIndex(item => item.id === book.bookReference.id);\n      tempOldBookShelf.splice(oldIndexBook, 1);\n      this.selectedBooks[bookFounded.shelf] = tempOldBookShelf;\n    }\n  }\n\n  onChangeRoute = () => {\n    this.props.onAddBooksShelfs(this.selectedBooks);\n  }\n\n  findBookInShelf = (book) => {\n    const bookFounded = {\n      id: -1,\n      shelf: '',\n    };\n    const allSelectedBooks = this.selectedBooks.currentlyReading\n      .concat(this.selectedBooks.wantToRead)\n      .concat(this.selectedBooks.read);\n    const bookIndex = allSelectedBooks.findIndex(item => item.id === book.bookReference.id);\n    bookFounded.id = bookIndex;\n    if (bookIndex >= 0) {\n      bookFounded.shelf = allSelectedBooks[bookIndex].shelf;\n    }\n\n    return bookFounded;\n  }\n\n  selectedBooks = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <button\n            className=\"close-search\"\n            style={{ cursor: 'pointer' }}\n            onClick={this.onChangeRoute}\n          >\n            Back home\n          </button>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={this.state.value}\n              onKeyUp={event => this.onChangeSearchQuery(event)}\n              ref={(input) => { this.inputSearch = input; }}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {this.state.resultingBooks.map(singleBook => (\n              <Book key={singleBook.id} {...singleBook} onChangeShelf={this.onChangeShelf} />\n            ))}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nSearchPage.propTypes = {\n  onAddBooksShelfs: PropTypes.func.isRequired,\n  existingBooks: PropTypes.shape({\n    currentlyReading: PropTypes.shape({\n      shelfBooks: PropTypes.array.isRequired,\n    }).isRequired,\n    wantToRead: PropTypes.shape({\n      shelfBooks: PropTypes.array.isRequired,\n    }).isRequired,\n    read: PropTypes.shape({\n      shelfBooks: PropTypes.array.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default SearchPage;\n","import React from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport uuidv4 from 'uuid/v4';\n\nimport * as BooksAPI from '../services/api/BooksAPI';\nimport Shelf from './Shelf';\nimport SearchPage from './SearchPage';\nimport '../components/styles/index.css';\n\nclass BooksApp extends React.Component {\n  state = {\n    currentlyReading: {\n      shelfTitle: 'Currently Reading',\n      shelfBooks: [],\n      id: 0,\n    },\n    wantToRead: {\n      shelfTitle: 'Want to Read',\n      shelfBooks: [],\n      id: 1,\n    },\n    read: {\n      shelfTitle: 'Read',\n      shelfBooks: [],\n      id: 2,\n    },\n  };\n\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((allBooks) => {\n        if (allBooks && allBooks.length) {\n          const tempCurrentlyReading = [];\n          const tempWantToRead = [];\n          const tempRead = [];\n          allBooks.forEach((item) => {\n            switch (item.shelf) {\n              case 'currentlyReading':\n                tempCurrentlyReading.push(item);\n                break;\n              case 'wantToRead':\n                tempWantToRead.push(item);\n                break;\n              case 'read':\n                tempRead.push(item);\n                break;\n              default:\n                console.log('none');\n            }\n          });\n          this.updateShelfState(tempCurrentlyReading, 'currentlyReading');\n          this.updateShelfState(tempWantToRead, 'wantToRead');\n          this.updateShelfState(tempRead, 'read');\n        }\n      });\n  }\n\n  onChangeShelf = (targetShelfName, book) => {\n    const originShelfName = book.bookReference.currentBookShelf;\n    if (originShelfName !== targetShelfName && targetShelfName !== 'none') {\n      const originShelf = Object.assign({}, this.state[originShelfName]);\n      originShelf.shelfBooks = originShelf.shelfBooks\n        .filter(bookItem => bookItem.id !== book.bookReference.id);\n      const targetShelf = this.state[targetShelfName];\n      targetShelf.shelfBooks\n        .push(Object.assign({}, book.bookReference, { shelf: targetShelfName }));\n\n      this.setState({\n        [originShelfName]: originShelf,\n        [targetShelfName]: targetShelf,\n      });\n\n      BooksAPI.update(book.bookReference, targetShelfName)\n        .then(() => console.log(\"Book's shelf updated\"));\n    }\n  }\n\n  updateShelfState = (data, shelfName) => {\n    this.setState({\n      [shelfName]: Object.assign({}, this.state[shelfName], { shelfBooks: data }),\n    });\n  }\n\n  updateSelectedBooks = (selectedBooks) => {\n    Object.keys(selectedBooks).forEach((property) => {\n      selectedBooks[property].forEach((newBook) => {\n        BooksAPI.update(newBook, property)\n          .then(() => console.log(\"Book's shelf updated\"));\n      });\n      this.updateShelfState(selectedBooks[property]\n        .concat(this.state[property].shelfBooks), property);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route\n          path=\"/search\"\n          render={({ history }) => (\n            <SearchPage\n              onAddBooksShelfs={(newBooks) => {\n                this.updateSelectedBooks(newBooks);\n                history.push('/');\n              }}\n              existingBooks={this.state}\n            />\n          )}\n        />\n\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n              </div>\n              <div className=\"list-books-content\">\n                <div>\n                  {Object.keys(this.state).map(shelf => (\n                    <Shelf\n                      key={uuidv4()}\n                      keyShelf={shelf}\n                      shelfData={this.state[shelf]}\n                      onChangeShelf={this.onChangeShelf}\n                    />\n                  ))}\n                </div>\n              </div>\n              <div className=\"open-search\">\n                <Link to=\"/search\" href>Add a book</Link>\n              </div>\n            </div>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport BooksApp from './components/BooksApp';\n\nReactDOM.render(\n  <BrowserRouter><BooksApp /></BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}